"""
demo_cdc_data
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from astro import sql as aql
import pandas as pd
import pendulum

from airflow import DAG
from airflow.providers.microsoft.azure.hooks import wasb
from airflow.operators.python import PythonOperator
from airflow.operators.bash import BashOperator
import pandas as pd
import requests

from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

# Functions must be defined here
def call_galactus(agent: str, payload: dict):
    # Import inside function for easy copy/paste to other demos
    import requests
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json',
    }

    try:
        url = f'https://usafacts-data.azurewebsites.net/api/galactus/{agent}?code=TLXAxCb6DdIsjOS1P2ZakrS2bvAYQ3RkTurY0hQcBupnAzFu7lHHnQ=='
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response
    except requests.exceptions.HTTPError as e:
        raise ValueError(e.args[0])

@aql.dataframe(task_id="wild_to_bronze")
def wild_to_bronze_func():
    agent = 'data_ingestion_agent_url'
    payload = {
        'pipelineId': '3187bb07-94ea-4f9c-bacf-0b89506321bc',
        'createBy': 'eddyn@usafacts.org',
        'codeLocation': 'airflow',
        'url': 'https://www.cdc.gov/wcms/vizdata/poxvirus/monkeypox/data/USmap_counts.csv?2032-08-18T11:30:00.000Z',
    }
    response = call_galactus(agent, payload)
    print(response.status_code)

@aql.dataframe(task_id="bronze_to_silver")
def bronze_to_silver_func():
    # Can configure this to airflow env
    wasb_url = 'wasb://DefaultEndpointsProtocol=https;AccountName=usafactsdata;AccountKey=hgIyRYwBsEeP2ylYNFGVFuNALzrHcG6HAH+yThptirFuK1mcDaezKdEKRNzBFkRTrV4WgJSJe5uCpSSJ5QJHLw==;EndpointSuffix=core.windows.net'
    
    wasb.wasb_default(wasb_url)  # also has async hook

@dag(
    schedule="0 0 * * *",
    start_date=pendulum.from_format("2023-07-14", "YYYY-MM-DD").in_tz("UTC"),
    catchup=False,
)
def demo_cdc_data():
    wild_to_bronze = wild_to_bronze_func()

    bronze_to_silver = bronze_to_silver_func()

dag_obj = demo_cdc_data()
